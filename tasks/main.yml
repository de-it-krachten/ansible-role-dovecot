---

- name: Load variables based on OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "family-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "family-{{ ansible_os_family }}.yml"
        - default.yml
      paths:
        - "vars"

- name: Install packages
  ansible.builtin.package:
    name: "{{ dovecot_packages }}"
    state: present

- name: Start service
  ansible.builtin.service:
    name: "{{ dovecot_service }}"
    enabled: yes

- name: Check if DH2048 file exists
  ansible.builtin.stat:
    path: "{{ dovecot_conf_dir }}/dh2048.pem"
  register: dh2048

- name: Create dh2048.pem
  ansible.builtin.command: openssl dhparam -out {{ dovecot_conf_dir }}/dh2048.pem 2048
  when: not dh2048.stat.exists

- name: Configuring dovecot configuration (delete lines)
  ansible.builtin.lineinfile:
    path: "{{ item.value.path }}"
    state: absent
    regexp: "^( *){{ item.value.var }} =.*"
  with_dict: "{{ dovecot_settings | combine(dovecot_settings_overwrite, recursive=True) }}"
  when: item.value.state is defined and item.value.state == 'absent'
  notify: Restart dovecot

- name: Configuring dovecot configuration (replace lines)
  ansible.builtin.replace:
    path: "{{ item.value.path }}"
    regexp: "^( *)(#)?{{ item.value.var }} =.*"
    replace: "\\1{{ item.value.var }} = {{ (item.value.value | join(':')) if item.value.value | type_debug == 'list' else item.value.value }}"
  with_dict: "{{ dovecot_settings | combine(dovecot_settings_overwrite, recursive=True) }}"
  when: item.value.state is undefined or item.value.state == 'present'
  notify: Restart dovecot

- name: Configuring dovecot configuration (add lines)
  ansible.builtin.lineinfile:
    path: "{{ item.value.path }}"
    line: "{{ item.value.var }} = {{ (item.value.value | join(':')) if item.value.value | type_debug == 'list' else item.value.value }}"
  with_dict: "{{ dovecot_settings | combine(dovecot_settings_overwrite, recursive=True) }}"
  when: item.value.state is undefined or item.value.state == 'present'
  notify: Restart dovecot

- name: 10-master.conf | Insert smtp-auth
  ansible.builtin.blockinfile:
    path: /etc/dovecot/conf.d/10-master.conf
    marker: '  # {mark} ANSIBLE MANAGED BLOCK - smtp-auth'
    insertafter: '.*# Postfix smtp-auth.*'
    block: |2
        unix_listener /var/spool/postfix/private/auth {
            mode = 0660
            user = postfix
            group = postfix
        }
  notify: Restart dovecot

- name: 10-master.conf | Insert lmtp
  ansible.builtin.blockinfile:
    path: /etc/dovecot/conf.d/10-master.conf
    marker: '  # {mark} ANSIBLE MANAGED BLOCK - lmtp'
    insertafter: 'service lmtp {'
    block: |2
        unix_listener /var/spool/postfix/private/dovecot-lmtp {
            mode = 0600
            user = postfix
            group = postfix
        }
  notify: Restart dovecot

- name: 15-lda.conf | insert protocol lda
  ansible.builtin.blockinfile:
    path: /etc/dovecot/conf.d/15-lda.conf
    marker: '  # {mark} ANSIBLE MANAGED BLOCK - lda'
    insertafter: '^protocol lda {'
    block: |2
        mail_plugins = $mail_plugins sieve
  when: dovecot_lda | bool
  notify: Restart dovecot

- name: 20-lmtp.conf | insert protocol lmtp
  ansible.builtin.blockinfile:
    path: /etc/dovecot/conf.d/20-lmtp.conf
    marker: '  # {mark} ANSIBLE MANAGED BLOCK'
    insertafter: '^protocol lmtp {'
    block: |2
        mail_plugins = $mail_plugins sieve
  when: dovecot_lmtp | bool
  notify: Restart dovecot

- name: 20-imap.conf | insert protocol lmtp
  ansible.builtin.replace:
    path: /etc/dovecot/conf.d/20-imap.conf
    regexp: "^(  #)?mail_plugins = .*"
    replace: "  mail_plugins = $mail_plugins imap_sieve"
  notify: Restart dovecot

- name: 90-sieve.conf | create from template
  ansible.builtin.template:
    src: 90-sieve.conf.j2
    dest: /etc/dovecot/conf.d/90-sieve.conf
    mode: "0644"
    backup: yes
  notify: Restart dovecot

- name: Configuring firewall
  ansible.builtin.include_role:
    name: deitkrachten.firewall
  vars:
    firewall_ports: "{{ dovecot_fw_ports }}"
